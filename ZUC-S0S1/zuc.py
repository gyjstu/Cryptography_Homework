

Sboxes=[0x3e,0x72,0x5b,0x47,0xca,0xe0,0x00,0x33,0x04,0xd1,0x54,0x98,0x09,0xb9,0x6d,0xcb,
        0x7b,0x1b,0xf9,0x32,0xaf,0x9d,0x6a,0xa5,0xb8,0x2d,0xfc,0x1d,0x08,0x53,0x03,0x90,
        0x4d,0x4e,0x84,0x99,0xe4,0xce,0xd9,0x91,0xdd,0xb6,0x85,0x48,0x8b,0x29,0x6e,0xac,
        0xcd,0xc1,0xf8,0x1e,0x73,0x43,0x69,0xc6,0xb5,0xbd,0xfd,0x39,0x63,0x20,0xd4,0x38,
        0x76,0x7d,0xb2,0xa7,0xcf,0xed,0x57,0xc5,0xf3,0x2c,0xbb,0x14,0x21,0x06,0x55,0x9b,
        0xe3,0xef,0x5e,0x31,0x4f,0x7f,0x5a,0xa4,0x0d,0x82,0x51,0x49,0x5f,0xba,0x58,0x1c,
        0x4a,0x16,0xd5,0x17,0xa8,0x92,0x24,0x1f,0x8c,0xff,0xd8,0xae,0x2e,0x01,0xd3,0xad,
        0x3b,0x4b,0xda,0x46,0xeb,0xc9,0xde,0x9a,0x8f,0x87,0xd7,0x3a,0x80,0x6f,0x2f,0xc8,
        0xb1,0xb4,0x37,0xf7,0x0a,0x22,0x13,0x28,0x7c,0xcc,0x3c,0x89,0xc7,0xc3,0x96,0x56,
        0x07,0xbf,0x7e,0xf0,0x0b,0x2b,0x97,0x52,0x35,0x41,0x79,0x61,0xa6,0x4c,0x10,0xfe,
        0xbc,0x26,0x95,0x88,0x8a,0xb0,0xa3,0xfb,0xc0,0x18,0x94,0xf2,0xe1,0xe5,0xe9,0x5d,
        0xd0,0xdc,0x11,0x66,0x64,0x5c,0xec,0x59,0x42,0x75,0x12,0xf5,0x74,0x9c,0xaa,0x23,
        0x0e,0x86,0xab,0xbe,0x2a,0x02,0xe7,0x67,0xe6,0x44,0xa2,0x6c,0xc2,0x93,0x9f,0xf1,
        0xf6,0xfa,0x36,0xd2,0x50,0x68,0x9e,0x62,0x71,0x15,0x3d,0xd6,0x40,0xc4,0xe2,0x0f,
        0x8e,0x83,0x77,0x6b,0x25,0x05,0x3f,0x0c,0x30,0xea,0x70,0xb7,0xa1,0xe8,0xa9,0x65,
        0x8d,0x27,0x1a,0xdb,0x81,0xb3,0xa0,0xf4,0x45,0x7a,0x19,0xdf,0xee,0x78,0x34,0x60
]

Sboxes1=[0x55,0xc2,0x63,0x71,0x3b,0xc8,0x47,0x86,0x9f,0x3c,0xda,0x5b,0x29,0xaa,0xfd,0x77,
	0x8c,0xc5,0x94,0x0c,0xa6,0x1a,0x13,0x00,0xe3,0xa8,0x16,0x72,0x40,0xf9,0xf8,0x42,
	0x44,0x26,0x68,0x96,0x81,0xd9,0x45,0x3e,0x10,0x76,0xc6,0xa7,0x8b,0x39,0x43,0xe1,
	0x3a,0xb5,0x56,0x2a,0xc0,0x6d,0xb3,0x05,0x22,0x66,0xbf,0xdc,0x0b,0xfa,0x62,0x48,
	0xdd,0x20,0x11,0x06,0x36,0xc9,0xc1,0xcf,0xf6,0x27,0x52,0xbb,0x69,0xf5,0xd4,0x87,
	0x7f,0x84,0x4c,0xd2,0x9c,0x57,0xa4,0xbc,0x4f,0x9a,0xdf,0xfe,0xd6,0x8d,0x7a,0xeb,
	0x2b,0x53,0xd8,0x5c,0xa1,0x14,0x17,0xfb,0x23,0xd5,0x7d,0x30,0x67,0x73,0x08,0x09,
	0xee,0xb7,0x70,0x3f,0x61,0xb2,0x19,0x8e,0x4e,0xe5,0x4b,0x93,0x8f,0x5d,0xdb,0xa9,
	0xad,0xf1,0xae,0x2e,0xcb,0x0d,0xfc,0xf4,0x2d,0x46,0x6e,0x1d,0x97,0xe8,0xd1,0xe9,
	0x4d,0x37,0xa5,0x75,0x5e,0x83,0x9e,0xab,0x82,0x9d,0xb9,0x1c,0xe0,0xcd,0x49,0x89,
	0x01,0xb6,0xbd,0x58,0x24,0xa2,0x5f,0x38,0x78,0x99,0x15,0x90,0x50,0xb8,0x95,0xe4,
	0xd0,0x91,0xc7,0xce,0xed,0x0f,0xb4,0x6f,0xa0,0xcc,0xf0,0x02,0x4a,0x79,0xc3,0xde,
	0xa3,0xef,0xea,0x51,0xe6,0x6b,0x18,0xec,0x1b,0x2c,0x80,0xf7,0x74,0xe7,0xff,0x21,
	0x5a,0x6a,0x54,0x1e,0x41,0x31,0x92,0x35,0xc4,0x33,0x07,0x0a,0xba,0x7e,0x0e,0x34,
	0x88,0xb1,0x98,0x7c,0xf3,0x3d,0x60,0x6c,0x7b,0xca,0xd3,0x1f,0x32,0x65,0x04,0x28,
	0x64,0xbe,0x85,0x9b,0x2f,0x59,0x8a,0xd7,0xb0,0x25,0xac,0xaf,0x12,0x03,0xe2,0xf2,
]

def createEmptyList(size):
    return [0]*size

def createEmpty2DList(size):
    result = []
    x = 0
    while x < size:
        result.append(createEmptyList(size))
        x += 1
    return result

#x'^x''的结果diff一定时，查找所有可能的x' x'，进而算y'^y''
def generatePairsWithDifference( diff ):
    result = []
    for x in range (0,256):
        for y in range (0,256):
            if x ^ y == diff:
               result.append((x,y))
               break
    return result
#算y1'^y''
def outputDifferenceOfPair(pair, SBoxes):
    firstOutput = SBoxes[pair[0]]
    secondOutput = SBoxes[pair[1]]
    return firstOutput ^ secondOutput

def printDDT( DDT ):
    print("\t|0",end='')
    for i in range(1, 256):
        print("\t"+str(i), end='')
    print()
    for i in range(0, 256):
        print("----",end='')
    print()
    k = 0
    while k < len(DDT):
        s = str(k) + "\t|"
        for i in DDT[k]:
            s = s + "" + str(i) + "\t"
        print (s)
        k = k + 1

def DDT(SBoxes, SBoxNumber):
    DDT = createEmpty2DList(256)
    #此处x为x'^x''的值，diff为y'^y''的值
    for x in range(0,256):
        pairs = generatePairsWithDifference(x)
        for pair in pairs:
            diff = outputDifferenceOfPair(pair, SBoxes)
            #DDT数组记录 输入为x'^x''时结果为diff 出现的次数
            DDT[x][diff] += 1
    return DDT

def printAllDDT( SBoxes, typ ):
        print ("#### Differential Distribution Table of SBox-" + str(typ) + " ####")
        printDDT(DDT(SBoxes, typ))
        print ("\n")


#####################################

def printLAT( LAT ):
    print("\t|0",end='')
    for i in range(1,256):
        print("\t"+str(i),end='')
    print()
    for i in range(0,256):
        print("----",end='')
    print()
    i = 0
    line = ""
    for entry in LAT:
        if i%256 == 0:
            line += str(int(i/256)) + "\t|"
        line += str(entry) + "\t"
        if i%256 == 255:
            line += "\n"
        i += 1
    print (line)

def mask(x, a):
    #bin()的前两位没用，删掉不管所以从2开始赋值
    binX = bin(x)[2:]
    binA = bin(a)[2:]
    #前面补0到8位
    if len(binX) < 8:
        binX = "0"*(8-len(binX)) + binX
    if len(binA) < 8:
        binA = "0"*(8-len(binA)) + binA


    #按位&操作用于判断xi或者yi这一位是否参与了，这里相当于0^(xi& 1or0 )如果xi在式子中就是&1，否则&0，r初始值认为是0
    r = int(binX[0]) & int(binA[0])
    #边判断xi这位数是否参与了式子 边计算x1^x2^。。这种式子的结果
    for j in range(1,8):
        r ^= int(binX[j]) & int(binA[j])
    return r

def LATofSBOX( sBox ):
    lat = []
    #i j 代表Exi^Eyi=0这个式子，然后每个式子都遍历整个S盒查找=0的数量
    for i in range(0,256):
        for j in range(0,256):
            r = 0
            for x in range(0,256):
                sx =sBox[x]
                r += (mask(i,x) ^ mask(j,sx))
            r=256-r
            r = r - 128
            lat.append(r)
    printLAT(lat)

def LAT(sBoxes,tp):
    print ("######## LAT of SBox-" + str(tp) + " ########")
    LATofSBOX( sBoxes )
    print()
################################# MAIN #############################################3
#DDT
printAllDDT(Sboxes, 0)
printAllDDT(Sboxes1, 1)

#LAT
LAT( Sboxes,0 )
LAT(Sboxes1,1)
